// lib/core/services/ai_service.dart
import 'dart:convert';
import 'dart:math';

class AIService {
  // Singleton pattern
  static final AIService _instance = AIService._internal();
  factory AIService() => _instance;
  AIService._internal();

  bool _isInitialized = false;
  bool get isInitialized => _isInitialized;

  // Initialize AI service
  Future<void> initialize() async {
    try {
      _isInitialized = true;
      print('‚úÖ AI Service initialized successfully');
    } catch (e) {
      _isInitialized = false;
      print('‚ùå AI Service initialization failed: $e');
    }
  }

  // ‚úÖ Get Smart AI Response with context awareness
  Future<String> getSmartAIResponse({
    required String message,
    String? projectTitle,
    String? projectContext,
    List<String>? userSkills,
    String? conversationHistory,
  }) async {
    try {
      // Simulate AI processing delay
      await Future.delayed(const Duration(milliseconds: 1500));

      final msgLower = message.toLowerCase();
      final skills = userSkills ?? ['Programming', 'Development'];
      final project = projectTitle ?? 'Your Project';
      
      // Context-aware intelligent responses
      if (_containsGreeting(msgLower)) {
        return _generateGreetingResponse(project, skills);
      }
      
      if (_containsPlanningKeywords(msgLower)) {
        return _generatePlanningResponse(project, skills);
      }
      
      if (_containsTechnicalKeywords(msgLower)) {
        return _generateTechnicalResponse(project, skills);
      }
      
      if (_containsHelpKeywords(msgLower)) {
        return _generateHelpResponse(project);
      }
      
      if (_containsTeamKeywords(msgLower)) {
        return _generateTeamResponse(project);
      }
      
      if (_containsTestingKeywords(msgLower)) {
        return _generateTestingResponse(project, skills);
      }
      
      if (_containsDeploymentKeywords(msgLower)) {
        return _generateDeploymentResponse(project, skills);
      }
      
      // Default intelligent response
      return _generateDefaultResponse(project, message, skills);
      
    } catch (e) {
      print('‚ùå AI Service error: $e');
      return _generateFallbackResponse(message);
    }
  }

  // ‚úÖ Generate Project Suggestions
  Future<List<Map<String, dynamic>>> generateProjectSuggestions({
    required List<String> userSkills,
    List<String>? interests,
    String difficulty = 'intermediate',
  }) async {
    try {
      await Future.delayed(const Duration(milliseconds: 1000));
      
      final suggestions = <Map<String, dynamic>>[];
      final random = Random();
      
      // Base project templates based on skills
      final projectTemplates = _getProjectTemplates(userSkills, difficulty);
      
      for (int i = 0; i < min(5, projectTemplates.length); i++) {
        final template = projectTemplates[i];
        suggestions.add({
          'id': 'ai_proj_${random.nextInt(10000)}',
          'title': template['title'],
          'description': template['description'],
          'required_skills': userSkills.take(3).toList(),
          'category': template['category'],
          'difficulty': difficulty,
          'estimated_duration': template['duration'],
          'match_score': (0.9 - (i * 0.1)).clamp(0.5, 1.0),
          'ai_generated': true,
        });
      }
      
      return suggestions;
      
    } catch (e) {
      print('‚ùå AI Service error generating suggestions: $e');
      return _getFallbackSuggestions(userSkills, difficulty);
    }
  }

  // ‚úÖ Keyword Detection Methods
  bool _containsGreeting(String msg) {
    return msg.contains(RegExp(r'\b(hello|hi|hey|greetings|ÿ≥⁄µÿßŸà|ÿ≥ŸÑÿßŸÖ)\b'));
  }

  bool _containsPlanningKeywords(String msg) {
    return msg.contains(RegExp(r'\b(plan|planning|organize|roadmap|strategy|schedule)\b'));
  }

  bool _containsTechnicalKeywords(String msg) {
    return msg.contains(RegExp(r'\b(code|coding|programming|development|technical|bug|error|implementation)\b'));
  }

  bool _containsHelpKeywords(String msg) {
    return msg.contains(RegExp(r'\b(help|stuck|problem|issue|challenge|difficult)\b'));
  }

  bool _containsTeamKeywords(String msg) {
    return msg.contains(RegExp(r'\b(team|collaborate|members|communication|meeting)\b'));
  }

  bool _containsTestingKeywords(String msg) {
    return msg.contains(RegExp(r'\b(test|testing|quality|bug|debugging|qa)\b'));
  }

  bool _containsDeploymentKeywords(String msg) {
    return msg.contains(RegExp(r'\b(deploy|deployment|production|launch|release)\b'));
  }

  // ‚úÖ Response Generation Methods
  String _generateGreetingResponse(String project, List<String> skills) {
    final skillsText = skills.take(3).join(', ');
    return '''üëã **Hello! Welcome to your AI Project Assistant**

I'm excited to help you build **$project**! I can see you have great skills in **$skillsText**.

üéØ **Here's how I can assist you today:**

**Project Planning**
‚Ä¢ Break down your project into manageable phases
‚Ä¢ Create realistic timelines and milestones
‚Ä¢ Suggest best development practices

**Technical Guidance**
‚Ä¢ Code architecture recommendations
‚Ä¢ Technology stack suggestions
‚Ä¢ Problem-solving support

**Team Collaboration**
‚Ä¢ Workflow optimization
‚Ä¢ Communication strategies
‚Ä¢ Task management tips

What aspect of your project would you like to focus on first?''';
  }

  String _generatePlanningResponse(String project, List<String> skills) {
    return '''üìã **Smart Project Planning for $project**

üöÄ **Recommended Development Phases:**

**Phase 1: Foundation** (Week 1-2)
‚Ä¢ Define project requirements clearly
‚Ä¢ Set up development environment
‚Ä¢ Create basic project structure
‚Ä¢ Plan database schema (if needed)

**Phase 2: Core Development** (Week 3-6)
‚Ä¢ Implement main features step by step
‚Ä¢ Build user interface components
‚Ä¢ Add authentication & user management
‚Ä¢ Create API endpoints & data handling

**Phase 3: Enhancement** (Week 7-8)
‚Ä¢ Add advanced features
‚Ä¢ Improve user experience
‚Ä¢ Performance optimization
‚Ä¢ Error handling & validation

**Phase 4: Finalization** (Week 9-10)
‚Ä¢ Comprehensive testing
‚Ä¢ Bug fixes & improvements
‚Ä¢ Documentation
‚Ä¢ Deployment preparation

üí° **Given your ${skills.take(2).join(' & ')} skills, I recommend starting with the core functionality first. What specific feature would you like to tackle?**''';
  }

  String _generateTechnicalResponse(String project, List<String> skills) {
    return '''üîß **Technical Guidance for $project**

**Architecture Recommendations:**
‚Ä¢ Use clean, modular code structure
‚Ä¢ Implement proper error handling
‚Ä¢ Follow ${skills.contains('Flutter') ? 'Flutter' : skills.contains('React') ? 'React' : 'industry'} best practices
‚Ä¢ Consider scalability from the start

**Code Quality Tips:**
‚Ä¢ Write descriptive variable and function names
‚Ä¢ Add comments for complex logic
‚Ä¢ Use version control (Git) consistently
‚Ä¢ Implement unit tests where possible

**Common Issues & Solutions:**
‚Ä¢ **Performance**: Optimize heavy operations, use lazy loading
‚Ä¢ **Security**: Validate all inputs, use secure authentication
‚Ä¢ **Maintainability**: Keep functions small and focused
‚Ä¢ **User Experience**: Add loading states and error messages

**Debugging Strategy:**
1. Reproduce the issue consistently
2. Check logs and error messages
3. Use breakpoints and debugging tools
4. Test fixes in isolation

What specific technical challenge are you facing right now?''';
  }

  String _generateHelpResponse(String project) {
    return '''üÜò **I'm here to help with $project!**

**Let's solve this together:**

**Step 1: Describe the Problem**
‚Ä¢ What exactly isn't working?
‚Ä¢ When does the issue occur?
‚Ä¢ What error messages do you see?

**Step 2: Gather Information**
‚Ä¢ What were you trying to accomplish?
‚Ä¢ What steps led to this issue?
‚Ä¢ Have you made recent changes?

**Step 3: Troubleshoot**
‚Ä¢ Check for typos in code
‚Ä¢ Verify file paths and imports
‚Ä¢ Look at console/log output
‚Ä¢ Test in isolation

**Step 4: Find Solutions**
‚Ä¢ Search documentation
‚Ä¢ Check Stack Overflow
‚Ä¢ Try alternative approaches
‚Ä¢ Ask for specific help

**Common Quick Fixes:**
‚Ä¢ Restart development server
‚Ä¢ Clear cache/storage
‚Ä¢ Update dependencies
‚Ä¢ Check network connectivity

Tell me more about what you're stuck on, and I'll provide specific guidance!''';
  }

  String _generateTeamResponse(String project) {
    return '''üë• **Team Collaboration for $project**

**Effective Team Communication:**

**Daily Coordination**
‚Ä¢ 15-minute daily standup meetings
‚Ä¢ Share what you completed yesterday
‚Ä¢ Discuss today's goals
‚Ä¢ Identify any blockers

**Task Management**
‚Ä¢ Use project management tools (Trello, Asana)
‚Ä¢ Break work into small, clear tasks
‚Ä¢ Assign ownership and deadlines
‚Ä¢ Track progress visually

**Code Collaboration**
‚Ä¢ Use Git for version control
‚Ä¢ Create feature branches
‚Ä¢ Write clear commit messages
‚Ä¢ Review each other's code

**Knowledge Sharing**
‚Ä¢ Document decisions and processes
‚Ä¢ Share useful resources
‚Ä¢ Conduct mini-learning sessions
‚Ä¢ Create a team wiki

**Conflict Resolution**
‚Ä¢ Address issues early and directly
‚Ä¢ Focus on solutions, not problems
‚Ä¢ Listen actively to all perspectives
‚Ä¢ Seek compromise when possible

What specific team challenge would you like help with?''';
  }

  String _generateTestingResponse(String project, List<String> skills) {
    return '''üß™ **Testing Strategy for $project**

**Testing Pyramid Approach:**

**Unit Tests (Foundation)**
‚Ä¢ Test individual functions and components
‚Ä¢ Quick to run and easy to debug
‚Ä¢ Should cover core business logic
‚Ä¢ Aim for 70-80% of your tests here

**Integration Tests (Middle)**
‚Ä¢ Test how components work together
‚Ä¢ Verify API endpoints and database operations
‚Ä¢ Check user workflows
‚Ä¢ 15-20% of your test suite

**End-to-End Tests (Top)**
‚Ä¢ Test complete user journeys
‚Ä¢ Verify critical business scenarios
‚Ä¢ Use tools like Selenium or Cypress
‚Ä¢ 5-10% of tests, focus on key features

**${skills.contains('Flutter') ? 'Flutter' : skills.contains('React') ? 'React' : 'Mobile'} Specific Testing:**
‚Ä¢ Widget/Component testing
‚Ä¢ UI interaction testing
‚Ä¢ Performance testing
‚Ä¢ Device compatibility testing

**Testing Best Practices:**
‚Ä¢ Write tests before fixing bugs
‚Ä¢ Keep tests simple and focused
‚Ä¢ Use descriptive test names
‚Ä¢ Mock external dependencies

What type of testing would you like to implement first?''';
  }

  String _generateDeploymentResponse(String project, List<String> skills) {
    return '''üöÄ **Deployment Guide for $project**

**Pre-Deployment Checklist:**

**Code Quality**
‚Ä¢ All tests passing ‚úÖ
‚Ä¢ Code reviewed and approved ‚úÖ
‚Ä¢ No console errors or warnings ‚úÖ
‚Ä¢ Performance optimized ‚úÖ

**Security**
‚Ä¢ Environment variables secured ‚úÖ
‚Ä¢ API keys and secrets protected ‚úÖ
‚Ä¢ Input validation implemented ‚úÖ
‚Ä¢ HTTPS enabled ‚úÖ

**${skills.contains('Flutter') ? 'Flutter App' : skills.contains('React') ? 'Web App' : 'Application'} Deployment:**

**Flutter Mobile:**
‚Ä¢ Build release APK/IPA
‚Ä¢ Test on physical devices
‚Ä¢ Upload to Play Store/App Store
‚Ä¢ Configure app signing

**Web Application:**
‚Ä¢ Build production bundle
‚Ä¢ Configure CDN and caching
‚Ä¢ Set up domain and SSL
‚Ä¢ Deploy to hosting platform

**Backend API:**
‚Ä¢ Set up production database
‚Ä¢ Configure environment variables
‚Ä¢ Deploy to cloud service
‚Ä¢ Set up monitoring and logs

**Post-Deployment:**
‚Ä¢ Monitor application performance
‚Ä¢ Set up error tracking
‚Ä¢ Collect user feedback
‚Ä¢ Plan future updates

Which deployment platform are you considering?''';
  }

  String _generateDefaultResponse(String project, String message, List<String> skills) {
    return '''ü§ñ **AI Assistant for $project**

I understand you're asking about: **"$message"**

Based on your ${skills.join(', ')} skills, here are some relevant suggestions:

**Immediate Actions:**
‚Ä¢ Break down your question into smaller parts
‚Ä¢ Check documentation for specific APIs or frameworks
‚Ä¢ Look for similar examples in your codebase
‚Ä¢ Consider alternative approaches

**Resources to Explore:**
‚Ä¢ Official documentation
‚Ä¢ Community forums and discussions
‚Ä¢ Video tutorials and courses
‚Ä¢ Code examples and repositories

**Next Steps:**
‚Ä¢ Try implementing a simple version first
‚Ä¢ Test with sample data
‚Ä¢ Iterate and improve gradually
‚Ä¢ Document your learning process

üí° **For more specific help, try asking:**
‚Ä¢ "How do I implement [specific feature]?"
‚Ä¢ "What's the best way to handle [specific scenario]?"
‚Ä¢ "I'm getting [specific error], how to fix it?"

What specific aspect would you like me to elaborate on?''';
  }

  String _generateFallbackResponse(String message) {
    return '''üîÑ **Processing your request: "$message"**

I'm currently working on understanding your question better. While I process this, here are some general tips:

**Development Best Practices:**
‚Ä¢ Start with small, working increments
‚Ä¢ Test frequently as you build
‚Ä¢ Keep your code organized and commented
‚Ä¢ Don't hesitate to refactor when needed

**When Stuck:**
‚Ä¢ Take a step back and review the bigger picture
‚Ä¢ Try explaining the problem to someone else
‚Ä¢ Look for similar solutions online
‚Ä¢ Break complex problems into smaller parts

**Resources:**
‚Ä¢ Documentation is your best friend
‚Ä¢ Stack Overflow for specific issues
‚Ä¢ GitHub for code examples
‚Ä¢ YouTube for step-by-step tutorials

Please feel free to rephrase your question or ask about something more specific!''';
  }

  // ‚úÖ Project Templates
  List<Map<String, dynamic>> _getProjectTemplates(List<String> skills, String difficulty) {
    final templates = <Map<String, dynamic>>[];
    
    if (skills.any((s) => s.toLowerCase().contains('flutter') || s.toLowerCase().contains('mobile'))) {
      templates.addAll([
        {
          'title': 'Personal Task Manager App',
          'description': 'A complete task management app with categories, reminders, and progress tracking',
          'category': 'Mobile Development',
          'duration': '4-6 weeks',
        },
        {
          'title': 'Social Media Dashboard',
          'description': 'Create a social media management app with posting, analytics, and user engagement features',
          'category': 'Social App',
          'duration': '6-8 weeks',
        },
      ]);
    }
    
    if (skills.any((s) => s.toLowerCase().contains('web') || s.toLowerCase().contains('react') || s.toLowerCase().contains('javascript'))) {
      templates.addAll([
        {
          'title': 'E-commerce Website',
          'description': 'Build a full-featured online store with payment integration and admin panel',
          'category': 'Web Development',
          'duration': '8-10 weeks',
        },
        {
          'title': 'Portfolio Website',
          'description': 'Create a professional portfolio showcasing your projects and skills',
          'category': 'Personal Branding',
          'duration': '2-3 weeks',
        },
      ]);
    }
    
    // Add general templates
    templates.addAll([
      {
        'title': 'Learning Management System',
        'description': 'Build a platform for online courses with video streaming and progress tracking',
        'category': 'Education Technology',
        'duration': '10-12 weeks',
      },
      {
        'title': 'Chat Application',
        'description': 'Real-time messaging app with group chats, file sharing, and notifications',
        'category': 'Communication',
        'duration': '6-8 weeks',
      },
    ]);
    
    return templates;
  }

  List<Map<String, dynamic>> _getFallbackSuggestions(List<String> skills, String difficulty) {
    return [
      {
        'id': 'fallback_1',
        'title': 'Skill-Based Project',
        'description': 'A project tailored to your ${skills.join(', ')} skills',
        'required_skills': skills.take(3).toList(),
        'category': 'Custom Development',
        'difficulty': difficulty,
        'estimated_duration': '4-6 weeks',
        'match_score': 0.8,
        'ai_generated': false,
      }
    ];
  }
}